---
# tasks file for ambariupdates

- name: Make sure Ambari is up
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/#/login"
    method: GET
    validate_certs: false
    status_code: 200
    return_content: true
  register: ambari_status
  retries: 30
  delay: 10
  until: ambari_status is success


- name: Get Ambari auth token
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/users/admin/privileges"
    method: GET
    validate_certs: false
    status_code: 200
    headers:
      X-Requested-By: ambari
      Content-Type: application/x-www-form-urlencoded
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: auth_response
  failed_when: auth_response.status == 403

- name: Check ZooKeeper status (should have 3 nodes)
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/ZOOKEEPER/components/ZOOKEEPER_SERVER?fields=host_components/HostRoles/state,host_components/HostRoles/host_name"
    method: GET
    validate_certs: false
    status_code: [200, 404, 403, 401]
    headers:
      X-Requested-By: ambari
      Content-Type: application/x-www-form-urlencoded
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: zk_status

- name: Get running ZooKeeper count
  ansible.builtin.set_fact:
    running_zk_count: >
      {{- (zk_status.content | from_json).host_components | default([]) |
          map(attribute='HostRoles') |
          selectattr('state', 'equalto', 'STARTED') |
          list |
          length -}}
  when: zk_status.content is defined

- name: Verify ZooKeeper is running
  ansible.builtin.assert:
    that: running_zk_count | int > 0
    fail_msg: No running ZooKeeper nodes found
    success_msg: Found {{ running_zk_count }} running ZooKeeper nodes
  register: zk_check
  retries: 30
  delay: 10
  until: not zk_check.failed

- name: Check NIFI status (should have 3 nodes)
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/NIFI/components/NIFI_MASTER?fields=host_components/HostRoles/state,host_components/HostRoles/host_name"
    method: GET
    validate_certs: false
    status_code: [200, 404, 403, 401]
    headers:
      X-Requested-By: ambari
      Content-Type: application/x-www-form-urlencoded
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: nifi_status
  until: >
    nifi_status.status == 200 and
    nifi_status.content is defined and
    (nifi_status.content | from_json).host_components is defined and
    (nifi_status.content | from_json).host_components | length == 3 and
    ((nifi_status.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'STARTED') | list | length) == 3
  retries: 30
  delay: 10

- name: Check SOLR status (should have 1 node)
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/AMBARI_INFRA_SOLR/components/INFRA_SOLR?fields=host_components/HostRoles/state,host_components/HostRoles/host_name"
    method: GET
    validate_certs: false
    status_code: [200, 404, 403, 401]
    headers:
      X-Requested-By: ambari
      Content-Type: application/x-www-form-urlencoded
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: solr_status
  until: >
    solr_status.status == 200 and
    solr_status.content is defined and
    (solr_status.content | from_json).host_components is defined and
    (solr_status.content | from_json).host_components | length == 1 and
    ((solr_status.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'STARTED') | list | length) == 1
  retries: 30
  delay: 10

- name: Check RANGER status (should have 1 node)
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/RANGER/components/RANGER_ADMIN?fields=host_components/HostRoles/state,host_components/HostRoles/host_name"
    method: GET
    validate_certs: false
    status_code: [200, 404, 403, 401]
    headers:
      X-Requested-By: ambari
      Content-Type: application/x-www-form-urlencoded
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: ranger_status
  until: >
    ranger_status.status == 200 and
    ranger_status.content is defined and
    (ranger_status.content | from_json).host_components is defined and
    (ranger_status.content | from_json).host_components | length == 1 and
    ((ranger_status.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'STARTED') | list | length) == 1
  retries: 30
  delay: 10

- name: Check NIFI REGISTRY status (should have 1 node)
  when: not ('DEV' in cluster_name | upper)
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/NIFI_REGISTRY/components/NIFI_REGISTRY_MASTER?fields=host_components/HostRoles/state,host_components/HostRoles/host_name"
    method: GET
    validate_certs: false
    status_code: [200, 404, 403, 401]
    headers:
      X-Requested-By: ambari
      Content-Type: application/x-www-form-urlencoded
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: registry_status
  until: >
    registry_status.status == 200 and
    registry_status.content is defined and
    (registry_status.content | from_json).host_components is defined and
    (registry_status.content | from_json).host_components | length == 1 and
    ((registry_status.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'STARTED') | list | length) == 1
  retries: 30
  delay: 10

# Stop Ranger service
- name: Stop Ranger service via Ambari API
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/RANGER"
    method: PUT
    body: '{"RequestInfo":{"context":"Stop Ranger Service"},"Body":{"ServiceInfo":{"state":"INSTALLED"}}}'
    body_format: json
    status_code: [200, 201, 202]
    headers:
      X-Requested-By: ambari
    validate_certs: false
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: stop_ranger
  until: stop_ranger is success
  retries: 3
  delay: 10

# Stop Solr service
- name: Stop Solr service via Ambari API
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/AMBARI_INFRA_SOLR"
    method: PUT
    body: '{"RequestInfo":{"context":"Stop Solr Service"},"Body":{"ServiceInfo":{"state":"INSTALLED"}}}'
    body_format: json
    status_code: [200, 201, 202]
    headers:
      X-Requested-By: ambari
    validate_certs: false
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: stop_solr
  until: stop_solr is success
  retries: 3
  delay: 10

- name: Stop Ambari server
  ansible.builtin.systemd:
    name: ambari-server
    state: stopped
  become: true

# Update and reboot if needed
- name: Update Ambari server packages
  ansible.builtin.dnf:
    name: "*"
    state: latest
    skip_broken: true
  become: true
  register: update_result

- name: Reboot if packages were updated
  ansible.builtin.reboot:
    reboot_timeout: 600
  when: update_result.changed
  become: true

# Start Ambari and services
- name: Start Ambari server
  ansible.builtin.systemd:
    name: ambari-server
    state: started
  become: true

- name: Wait for Ambari server to be ready
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/#/login"
    method: GET
    validate_certs: false
    status_code: 200
  register: ambari_status
  retries: 60
  delay: 10
  until: ambari_status is success

- name: Additional wait for Ambari services to stabilize
  ansible.builtin.pause:
    seconds: 30

- name: Verify Ranger is stopped before starting
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/RANGER/components/RANGER_ADMIN?fields=host_components/HostRoles/state"
    method: GET
    validate_certs: false
    status_code: [200, 404, 403, 401]
    headers:
      X-Requested-By: ambari
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: ranger_pre_start
  until: >
    ranger_pre_start.status == 200 and
    ranger_pre_start.content is defined and
    (ranger_pre_start.content | from_json).host_components is defined and
    ((ranger_pre_start.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'INSTALLED') | list | length) == 1
  retries: 30
  delay: 10

- name: Start Ranger service via Ambari API
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/RANGER"
    method: PUT
    body: '{"RequestInfo":{"context":"Start Ranger Service"},"Body":{"ServiceInfo":{"state":"STARTED"}}}'
    body_format: json
    status_code: [200, 201, 202]
    headers:
      X-Requested-By: ambari
    validate_certs: false
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: start_ranger
  until: start_ranger is success
  retries: 6
  delay: 20

- name: Start Solr service via Ambari API
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/AMBARI_INFRA_SOLR"
    method: PUT
    body: '{"RequestInfo":{"context":"Start Solr Service"},"Body":{"ServiceInfo":{"state":"STARTED"}}}'
    body_format: json
    status_code: [200, 201, 202]
    headers:
      X-Requested-By: ambari
    validate_certs: false
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: start_solr
  until: start_solr is success
  retries: 3
  delay: 10

# Final service verification
- name: Verify Ranger is running
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/RANGER/components/RANGER_ADMIN?fields=host_components/HostRoles/state"
    method: GET
    validate_certs: false
    status_code: [200]
    headers:
      X-Requested-By: ambari
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: ranger_final
  until: >
    ranger_final.status == 200 and
    ranger_final.content is defined and
    (ranger_final.content | from_json).host_components is defined and
    ((ranger_final.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'STARTED') | list | length) == 1
  retries: 30
  delay: 10

- name: Verify Solr is running
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/AMBARI_INFRA_SOLR/components/INFRA_SOLR?fields=host_components/HostRoles/state"
    method: GET
    validate_certs: false
    status_code: [200]
    headers:
      X-Requested-By: ambari
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: solr_final
  until: >
    solr_final.status == 200 and
    solr_final.content is defined and
    (solr_final.content | from_json).host_components is defined and
    ((solr_final.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'STARTED') | list | length) == 1
  retries: 30
  delay: 10

- name: Final NiFi status check
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/NIFI/components/NIFI_MASTER?fields=host_components/HostRoles/state"
    method: GET
    validate_certs: false
    status_code: [200]
    headers:
      X-Requested-By: ambari
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: nifi_final
  until: >
    nifi_final.status == 200 and
    nifi_final.content is defined and
    (nifi_final.content | from_json).host_components is defined and
    ((nifi_final.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'STARTED') | list | length) == 3
  retries: 30
  delay: 10

- name: Final ZooKeeper status check
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}.vuhl.root.mrc.local:{{ ambari_port }}/api/v1/clusters/{{ cluster_name }}/services/ZOOKEEPER/components/ZOOKEEPER_SERVER?fields=host_components/HostRoles/state"
    method: GET
    validate_certs: false
    status_code: [200]
    headers:
      X-Requested-By: ambari
    url_username: "{{ ambari_admin_username }}"
    url_password: "{{ ambari_admin_password }}"
    force_basic_auth: true
    return_content: true
  register: zk_final
  until: >
    zk_final.status == 200 and
    zk_final.content is defined and
    (zk_final.content | from_json).host_components is defined and
    ((zk_final.content | from_json).host_components | map(attribute='HostRoles') | selectattr('state', 'equalto', 'STARTED') | list | length) > 0
  retries: 30
  delay: 10
